#include "mraa.hpp"
#include <iostream>
#include <stdint.h>		//libreria para "sprintf()""
using namespace std;

enum Tipos { OBTENER_LUX,OBTENER_MAX, OBTENER_MIN, OBTENER_PROM, OBTENER_TODO, 
	RESPONDER_LUX,RESPONDER_MAX, RESPONDER_MIN, RESPONDER_PROM, RESPONDER_TODO, ERROR};

#define tamanioMaxPaquete 73
#define tamanioMinPaquete 7

int main() {
	// Inicializar led conectado a GPIO y controlador de I2C
	mraa::Gpio* d_pin = NULL;

	d_pin = new mraa::Gpio(3, true, true); //primer parametro es el PIN que va a utilizar para gpio.

    mraa::I2c* i2c;
    i2c = new mraa::I2c(0); //UTILIZA EL CONSTRUCTOR ISC(BUS ,RAW) CON RAW=NULL Y BUS=0.
    i2c->address(8); //LE INDICA QUE EL ESCLAVO A ESCUCHAR ESTA EN LA DIR 8.
    
    //inicializo el tipo y el arreglo que almacenara la respuesta:
	enum Tipos tipo_enviado= OBTENER_LUX;
	uint8_t receive_buf[tamanioMaxPaquete];	//arreglo que almacena la respuesta.
	uint8_t send_buf[tamanioMinPaquete]={"<07$"};		//arreglo que almacena lo recibido

	sprintf( send_buf, "%s%d$>", send_buf, tipo_enviado);	//concatena tipo_msje y "$>".
    //..fin inializar variables paquete.

    // Indefinidamente
    for (;;){

	    //enviar paquete de solicitud al slave:
	    i2c->write(send_buf,tamanioMinPaquete); //parametros: (1)datos a enviar y (2) cant de datos a enviar
	    //..fin enviar paquete.

	    //una vez enviado el pedido lee del buffer la respuesta del slave.
	    sleep(1);
	    d_pin->write(0);
	    //leo el primer byte
	    i2c->read(receive_buf[0], 1);
	    if(receive_buf[0]=='<'){	//comienza un paquete..
	    	//leemos del bus el tamanio total del paquete:
	    	i2c->read(receive_buf[1],3);		//leo campos "tamañoTotal" y separador "$"
	    	
	    	if(receive_buf[3]=="$"){		//si el 3er Byte es el separador de TamañoTotal..
		    	
		    	//convierto el valor leido en un entero (TamañoTotal):
		    	int tamTotal=0;
				int digito;
				for(int i=1; i<3; i++){
					digito=  recieve_buf[i]- '0';
					tamTotal= tamTotal*10 + digito;
				}
				//..fin conversion.

				//conociendo el tamaño total, leemos del bus el resto de los Bytes:
				i2c->read(receive_buf[4],tamTotal-4);	//tamTotal-( "<" + "tamañoTotal" + "$" )=4 Bytes menos.
				//..fin lectura total.
				if(receive_buf[5]=="$"){	//si el 5to Byte es el separador de Tipo..

					//determino y convierto a int el tipo del paquete:
					enum Tipos tipo_recibido=  recieve_buf[4]- '0';
					int tipoCorrecto=0;
					//chequeo que lo solicitado se corresponda con lo recibido: 
					switch(tipo_enviado){
						case OBTENER_LUX: {
							if(tipo_recibido==RESPONDER_LUX)
								tipoCorrecto=1;
						}break;

						case OBTENER_LUX: {
							if(tipo_recibido==RESPONDER_LUX)
								tipoCorrecto=1;
						}break;

						case OBTENER_MIN: {
							if(tipo_recibido==RESPONDER_MIN)
								tipoCorrecto=1;
						}break;

						case OBTENER_MAX: {
							if(tipo_recibido==RESPONDER_MAX)
								tipoCorrecto=1;
						}break;

						case OBTENER_PROM: {
							if(tipo_recibido==RESPONDER_PROM)
								tipoCorrecto=1;
						}break;

						case OBTENER_TODO: {
							if(tipo_recibido==RESPONDER_TODO)
								tipoCorrecto=1;
						}break;

						default: {		//en caso de recibir un paquete ERROR!
							tipoCorrecto=0;
						}

					}//fin switch.

					if(tipoCorrecto){	//si se corresponde lo pedido con lo recibido:
						uint8_t payload[tamTotal-7]		//TamañoTotal-7 Bytes
						int finPaquete=0;	//encontre el simbolo de fin de paquete ">"
						int posBuffer=6;
						int posPayload=0;
						while(posBuffer<tamanioMaxPaquete && !finPaquete){	//leo y agrego al arreglo hasta llegar al ">"
							if(receive_buf[posBuffer]==">")
								finPaquete=1;
							else {
								payload[posPayload]=receive_buf[posBuffer];
								posBuffer++;
								posPayload++;
							}
						}
						if(finPaquete)
							printf((char *) payload[tamTotal-7], "%s\n");
						else 
							printf("ERROR! los datos recibidos estan corruptos\n" );
					}
					else 
						printf("ERROR! los datos recibidos no concuerdan con los solicitados\n" );
					
					//ENCIENDO LED DE CONTROL..
    				sleep(1);
    				d_pin->write(1);
    				// Forzar la salida de stdout
    				fflush(stdout);
				}//..fin separador Tipo
			}//..fin separador TamañoTotal
	    }//..fin comienza Paquete
    }//fin BUCLE INFINITO..
    return 0;
}//FIN MAIN..
